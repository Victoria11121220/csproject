//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::IotFieldType;
use super::sea_orm_active_enums::IotUnit;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "sensor")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub flow_id: Option<i32>,
    #[sea_orm(column_type = "Text")]
    pub identifier: String,
    #[sea_orm(column_type = "Text")]
    pub measuring: String,
    pub unit: IotUnit,
    pub value_type: IotFieldType,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::iot_flow::Entity",
        from = "Column::FlowId",
        to = "super::iot_flow::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    IotFlow,
    #[sea_orm(has_many = "super::reading::Entity")]
    Reading,
    #[sea_orm(has_many = "super::sensor_metadata::Entity")]
    SensorMetadata,
}

impl Related<super::iot_flow::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IotFlow.def()
    }
}

impl Related<super::reading::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Reading.def()
    }
}

impl Related<super::sensor_metadata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SensorMetadata.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
