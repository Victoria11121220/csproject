//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use super::sea_orm_active_enums::FieldTypes;
use super::sea_orm_active_enums::Units;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "sensors")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub flow_id: Option<i32>,
    #[sea_orm(column_type = "Text")]
    pub identifier: String,
    #[sea_orm(column_type = "Text")]
    pub measuring: String,
    pub unit: Units,
    pub value_type: FieldTypes,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::metadata::Entity")]
    Metadata,
    #[sea_orm(has_many = "super::readings::Entity")]
    Readings,
}

impl Related<super::metadata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Metadata.def()
    }
}

impl Related<super::readings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Readings.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}