//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "iot_flow")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub site_id: i32,
    #[sea_orm(column_type = "Text", unique)]
    pub name: String,
    #[sea_orm(column_type = "JsonBinary")]
    pub nodes: Json,
    #[sea_orm(column_type = "JsonBinary")]
    pub edges: Json,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::flow_error::Entity")]
    FlowError,
    #[sea_orm(has_many = "super::iot_flow_debug_message::Entity")]
    IotFlowDebugMessage,
    #[sea_orm(has_many = "super::sensor::Entity")]
    Sensor,
    #[sea_orm(
        belongs_to = "super::site::Entity",
        from = "Column::SiteId",
        to = "super::site::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Site,
}

impl Related<super::flow_error::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FlowError.def()
    }
}

impl Related<super::iot_flow_debug_message::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IotFlowDebugMessage.def()
    }
}

impl Related<super::sensor::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sensor.def()
    }
}

impl Related<super::site::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Site.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}