# k8s-manifests/postgres.yaml

# 1. Create a Secret to store the database password
# Note: Here we use stringData directly, and Kubernetes will automatically do Base64 encoding for us
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: listener-operator-system
# --- NOTE: There is no 'spec' field ---
type: Opaque
stringData:
  # Corresponds to POSTGRES_PASSWORD
  POSTGRES_PASSWORD: "123456"

---
# 2. Apply for a persistent storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: listener-operator-system
spec:
  # Access mode: ReadWriteOnce means that this volume can only be read and written by one node at a time
  accessModes:
    - ReadWriteOnce
  # Storage Type: Kind provides a StorageClass called 'standard' by default
  storageClassName: standard
  resources:
    # Request 1 GiB of storage space
    requests:
      storage: 1Gi

---
# 3. Create a stable network service entrance
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: listener-operator-system
spec:
  # Service Type: ClusterIP means this service is only visible within the cluster
  type: ClusterIP
  # Port mapping: Map the service's port 5432 to the Pod's port 5432
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
  # Selector: This Service will forward traffic to Pods with the label 'app: postgres'
  selector:
    app: postgres

---
# 4. Create a Deployment to run the PostgreSQL Pod
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: listener-operator-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        # This label must match the Service selector
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:16
          # Expose the container's port 5432
          ports:
            - containerPort: 5432
          env:
            # Environment variable: database name
            - name: POSTGRES_DB
              value: "iot_dataflow_manager"
            # Environment variable: password, referenced from the Secret we created
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret # Secret Name
                  key: POSTGRES_PASSWORD # Secret Key
          # Mount the persistent storage we applied for
          volumeMounts:
            - name: postgres-storage
              # Mount to the default path where PostgreSQL stores data
              mountPath: /var/lib/postgresql/data
      # Define the volume and associate it with our PVC
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc # PVC name