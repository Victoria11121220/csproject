//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{ Deserialize, Serialize };

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "iot_field_type")]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum IotFieldType {
    #[sea_orm(string_value = "BOOLEAN")]
    Boolean,
    #[sea_orm(string_value = "NUMBER")]
    Number,
    #[sea_orm(string_value = "STRING")]
    String,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "iot_source_type")]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum IotSourceType {
    #[sea_orm(string_value = "HTTP")]
    Http,
    #[sea_orm(string_value = "MAS-MONITOR")]
    MasMonitor,
    #[sea_orm(string_value = "MQTT")]
    Mqtt,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "iot_unit")]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum IotUnit {
    #[sea_orm(string_value = "AMOUNT")]
    Amount,
    #[sea_orm(string_value = "AMPERE")]
    Ampere,
    #[sea_orm(string_value = "BOOLEAN")]
    Boolean,
    #[sea_orm(string_value = "CUBIC_METER")]
    CubicMeter,
    #[sea_orm(string_value = "DEGREES_CELCIUS")]
    DegreesCelcius,
    #[sea_orm(string_value = "METER_PER_SECOND")]
    MeterPerSecond,
    #[sea_orm(string_value = "PERCENT")]
    Percent,
    #[sea_orm(string_value = "STRING")]
    String,
    #[sea_orm(string_value = "VOLT")]
    Volt,
    #[sea_orm(string_value = "WATT")]
    Watt,
    #[sea_orm(string_value = "WATT_HOUR")]
    WattHour,
}