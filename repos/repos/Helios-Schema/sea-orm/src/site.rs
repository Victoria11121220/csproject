//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{ Deserialize, Serialize };

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "site")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text", unique)]
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    #[sea_orm(column_type = "JsonBinary")]
    pub location: Json,
    pub public: bool,
    #[sea_orm(column_type = "JsonBinary")]
    pub initial_view: Json,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(column_type = "Text")]
    pub projection_string: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::iot_flow::Entity")]
    IotFlow,
    #[sea_orm(has_many = "super::iot_source::Entity")]
    IotSource,
    #[sea_orm(has_many = "super::sensor::Entity")]
    Sensor,
}

impl Related<super::iot_flow::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IotFlow.def()
    }
}

impl Related<super::iot_source::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IotSource.def()
    }
}

impl Related<super::sensor::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sensor.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}